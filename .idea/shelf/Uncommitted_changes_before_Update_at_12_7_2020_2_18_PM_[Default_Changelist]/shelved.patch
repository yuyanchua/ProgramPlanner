Index: app/src/main/java/com/example/myapplication/activity/EventActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.activity;\r\n\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.CheckBox;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.example.myapplication.R;\r\nimport com.example.myapplication.element.Event;\r\nimport com.example.myapplication.element.Session;\r\nimport com.example.myapplication.engine.ManageEvent;\r\nimport com.example.myapplication.engine.Validation;\r\n\r\nimport java.util.Calendar;\r\n\r\npublic class EventActivity extends ProgramActivity {\r\n\r\n    TextView errView, dateView;\r\n    EditText titleEdit;\r\n    DatePickerDialog datePicker;\r\n    Calendar calendar;\r\n    int year, month, day;\r\n\r\n    ManageEvent manage;\r\n    Event newEvent;\r\n    Validation validation;\r\n    boolean isEdit = false;\r\n    int eventId;\r\n    Intent lastIntent;\r\n\r\n\r\n\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n//        if (getSupportActionBar() != null) {\r\n//            getSupportActionBar().hide();\r\n//        }\r\n        \r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_event_view);\r\n        setupUI(findViewById(R.id.eventViewActivity));\r\n\r\n        String projectIdStr = Session.getInstance().getProjectId();\r\n        String username = Session.getInstance().getUserName();\r\n\r\n        validation = new Validation(username, projectIdStr);\r\n\r\n        errView = findViewById(R.id.errorMessageTip);\r\n        errView.setVisibility(View.INVISIBLE);\r\n\r\n        manage = new ManageEvent(this, projectIdStr);\r\n\r\n\r\n        lastIntent = getIntent();\r\n        try{\r\n            String eventId = lastIntent.getStringExtra(\"eventId\");\r\n            if(!eventId.isEmpty()){\r\n                isEdit = true;\r\n                this.eventId = Integer.parseInt(eventId);\r\n                manage.setEventId(this.eventId);\r\n                manage.getEventValue();\r\n//                getEventValue();\r\n            }\r\n        }catch (Exception ex){\r\n            ex.printStackTrace();\r\n        }\r\n\r\n        dateView = findViewById(R.id.textViewDate);\r\n        dateView.setOnClickListener(v -> {\r\n            calendar = Calendar.getInstance();\r\n            day = calendar.get(Calendar.DAY_OF_MONTH);\r\n            month = calendar.get(Calendar.MONTH);\r\n            year = calendar.get(Calendar.YEAR);\r\n\r\n            datePicker = new DatePickerDialog(EventActivity.this,\r\n                    (view, year, month, dayOfMonth) -> {\r\n                        String date = (month+ 1) + \"-\" + dayOfMonth + \"-\" + year;\r\n                        dateView.setText(date);\r\n                    }, year, month, day);\r\n            datePicker.show();\r\n        });\r\n\r\n        Button btAdd = findViewById(R.id.buttonAddEvent);\r\n        btAdd.setOnClickListener(v -> {\r\n            if(validate())\r\n                addEvent();\r\n        });\r\n\r\n        Button btBack = findViewById(R.id.buttonBack);\r\n        btBack.setOnClickListener(v -> {\r\n            validate();\r\n            finish();\r\n        });\r\n    }\r\n\r\n\r\n    public void setEvent(Event event){\r\n        this.eventId = Integer.parseInt(event.eventId);\r\n\r\n        titleEdit = findViewById(R.id.textBoxEventName);\r\n        titleEdit.setText(event.eventTitle);\r\n\r\n        dateView = findViewById(R.id.textViewDate);\r\n        dateView.setText(event.eventDate);\r\n\r\n        CheckBox notify = findViewById(R.id.checkBox);\r\n        System.out.println(\"Check : \" + event.isNotify);\r\n        notify.setChecked(event.isNotify);\r\n    }\r\n\r\n\r\n    private void addEvent(){\r\n        titleEdit = findViewById(R.id.textBoxEventName);\r\n        String title = titleEdit.getText().toString();\r\n        boolean isValid = true;\r\n\r\n        if(title.isEmpty()){\r\n            isValid = false;\r\n\r\n        }\r\n        String date = dateView.getText().toString();\r\n\r\n        if(date.equals(\"Select to Choose Date\")){\r\n            isValid = false;\r\n        }\r\n\r\n        CheckBox notify = findViewById(R.id.checkBox);\r\n        boolean isNotify = notify.isChecked();\r\n        System.out.println(\"IsNotify: \" + isNotify);\r\n\r\n        if(isValid) {\r\n            newEvent = new Event(title, date, isNotify);\r\n\r\n            if(!isEdit){\r\n                manage.addNewEvent(newEvent);\r\n            }else{\r\n                manage.editEvent(eventId, newEvent);\r\n            }\r\n        }else{\r\n            String errMsg = \"Either title or date is invalid\";\r\n            errView.setText(errMsg);\r\n            errView.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n\r\n    private boolean validate(){\r\n        boolean isValid = true;\r\n        String message = null;\r\n        if(validation.isExist()){\r\n            String roles = validation.getRoles();\r\n            if(roles.equals(\"client\")){\r\n                message = \"Your role has been altered\";\r\n                isValid = false;\r\n            }\r\n        }else{\r\n            message = \"You have been kicked out of the project!\";\r\n            isValid = false;\r\n        }\r\n\r\n        if(!isValid){\r\n            backToProjectPage(message);\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    private void backToProjectPage(String message){\r\n        if(message == null){\r\n            message = \"Encountered unexpected error\";\r\n        }\r\n        Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();\r\n        Intent intent = new Intent(EventActivity.this, ProjectMainActivity.class);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivity(intent);\r\n    }\r\n\r\n\r\n    public void finishAdd(){\r\n        Toast.makeText(getApplicationContext(), \"New Event is Created\", Toast.LENGTH_SHORT).show();\r\n        returnPage();\r\n    }\r\n\r\n\r\n    private void returnPage(){\r\n        boolean isTimeline = lastIntent.getExtras().getBoolean(\"isTimeline\");\r\n        System.out.println(\"Timeline: \" + isTimeline);\r\n        if(isTimeline || isEdit){\r\n\r\n            Intent intent = new Intent(EventActivity.this, TimelineActivity.class);\r\n            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n            intent.putExtra(\"isDeveloper\", true);\r\n            startActivity(intent);\r\n        }else{\r\n            finish();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/activity/EventActivity.java	(revision cd9eb28d35497b8cfe72b1308ad98954080e8c09)
+++ app/src/main/java/com/example/myapplication/activity/EventActivity.java	(date 1606883047429)
@@ -85,6 +85,7 @@
                         String date = (month+ 1) + "-" + dayOfMonth + "-" + year;
                         dateView.setText(date);
                     }, year, month, day);
+            datePicker.getDatePicker().setMinDate(System.currentTimeMillis() - 1000);
             datePicker.show();
         });
 
Index: app/src/main/res/layout/activity_notebook_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!--ScrollView\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:fillViewport=\"true\"-->\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/notebookActivity\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\">\r\n\r\n\r\n        <TextView\r\n            android:id=\"@+id/noteBookTitle\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"140dp\"\r\n            android:layout_marginTop=\"53dp\"\r\n            android:text=\"Notebook\"\r\n            android:textSize=\"30sp\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n        <EditText\r\n            android:id=\"@+id/editTextNote\"\r\n            android:layout_width=\"314dp\"\r\n            android:layout_height=\"94dp\"\r\n            android:layout_marginStart=\"52dp\"\r\n            android:layout_marginTop=\"21dp\"\r\n            android:background=\"#DDF1FA\"\r\n            android:ems=\"10\"\r\n            android:gravity=\"start|top\"\r\n            android:inputType=\"textMultiLine\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/addNoteTip\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/noteListTip\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"167dp\"\r\n            android:layout_marginTop=\"17dp\"\r\n            android:text=\"Note List:\"\r\n            android:textSize=\"18sp\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/noteBookTitle\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/addNoteTip\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"144dp\"\r\n            android:layout_marginTop=\"12dp\"\r\n            android:text=\"Add New Note:\"\r\n            android:textSize=\"18sp\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/noteScroll\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/buttonSubmit\"\r\n            android:layout_width=\"100dp\"\r\n            android:layout_height=\"50dp\"\r\n            android:layout_marginStart=\"67dp\"\r\n            android:layout_marginTop=\"28dp\"\r\n            android:text=\"Submit\"\r\n            android:textAllCaps=\"false\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/editTextNote\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/buttonBack\"\r\n            android:layout_width=\"100dp\"\r\n            android:layout_height=\"50dp\"\r\n            android:layout_marginStart=\"76dp\"\r\n            android:layout_marginTop=\"28dp\"\r\n            android:text=\"Back\"\r\n            android:textAllCaps=\"false\"\r\n            app:layout_constraintStart_toEndOf=\"@+id/buttonSubmit\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/editTextNote\" />\r\n\r\n        <ScrollView\r\n            android:id=\"@+id/noteScroll\"\r\n            android:layout_width=\"406dp\"\r\n            android:layout_height=\"208dp\"\r\n            android:layout_marginTop=\"20dp\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/noteListTip\">\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/noteList\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"vertical\" />\r\n        </ScrollView>\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_notebook_view.xml	(revision cd9eb28d35497b8cfe72b1308ad98954080e8c09)
+++ app/src/main/res/layout/activity_notebook_view.xml	(date 1606884801101)
@@ -84,19 +84,19 @@
             app:layout_constraintStart_toEndOf="@+id/buttonSubmit"
             app:layout_constraintTop_toBottomOf="@+id/editTextNote" />
 
-        <ScrollView
-            android:id="@+id/noteScroll"
-            android:layout_width="406dp"
-            android:layout_height="208dp"
-            android:layout_marginTop="20dp"
-            app:layout_constraintEnd_toEndOf="parent"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toBottomOf="@+id/noteListTip">
+    <ScrollView
+        android:id="@+id/noteScroll"
+        android:layout_width="362dp"
+        android:layout_height="239dp"
+        android:layout_marginTop="20dp"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/noteListTip">
 
-            <LinearLayout
-                android:id="@+id/noteList"
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:orientation="vertical" />
-        </ScrollView>
+        <LinearLayout
+            android:id="@+id/noteList"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical" />
+    </ScrollView>
     </androidx.constraintlayout.widget.ConstraintLayout>
Index: app/src/main/java/com/example/myapplication/activity/InviteActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.activity;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.cardview.widget.CardView;\r\n\r\nimport com.example.myapplication.R;\r\nimport com.example.myapplication.element.Session;\r\nimport com.example.myapplication.engine.ManageProjectInvite;\r\nimport com.example.myapplication.engine.Validation;\r\n\r\npublic class InviteActivity extends ProgramActivity{\r\n    TextView customerView, developerView, errView;\r\n    CardView notification;\r\n\r\n    EditText userEdit;\r\n    ManageProjectInvite manage;\r\n    Validation validation;\r\n\r\n    Spinner roleSpin;\r\n    boolean isManager;\r\n\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n//        if (getSupportActionBar() != null) {\r\n//            getSupportActionBar().hide();\r\n//        }\r\n\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_invite_code_page);\r\n        setupUI(findViewById(R.id.inviteViewActivity));\r\n\r\n        errView = findViewById(R.id.errorMessageTip);\r\n        errView.setVisibility(View.INVISIBLE);\r\n\r\n        String username = Session.getInstance().getUserName();\r\n        String projectId = Session.getInstance().getProjectId();\r\n\r\n        validation = new Validation(username, projectId);\r\n\r\n\r\n        notification = findViewById(R.id.notification);\r\n\r\n        manage = new ManageProjectInvite(this, Session.getInstance().getProjectId());\r\n        manage.getInviteCode();\r\n\r\n        Intent intent = getIntent();\r\n        isManager = intent.getExtras().getBoolean(\"isManager\");\r\n\r\n\r\n        setupSpinner();\r\n        setupButton();\r\n\r\n    }\r\n\r\n    private boolean validate(){\r\n        boolean isValid = true;\r\n        String message = null;\r\n        if(validation.isExist()){\r\n            String roles = validation.getRoles();\r\n            if(roles.equals(\"client\")){\r\n                message = \"Your role has been altered\";\r\n                isValid = false;\r\n            }\r\n        }else{\r\n            message = \"You have been kicked out of the project!\";\r\n            isValid = false;\r\n        }\r\n\r\n        if(!isValid){\r\n            backToProjectPage(message);\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    private void backToProjectPage(String message){\r\n        if(message == null){\r\n            message = \"Encountered unexpected error\";\r\n        }\r\n        Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();\r\n        Intent intent = new Intent(InviteActivity.this, ProjectMainActivity.class);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivity(intent);\r\n    }\r\n\r\n    private void setupSpinner(){\r\n        roleSpin = findViewById(R.id.spinnerRole);\r\n        String [] roles = {\"client\", \"developer\"};\r\n        ArrayAdapter<String> roleAdapter = new ArrayAdapter<>(this, R.layout.support_simple_spinner_dropdown_item, roles);\r\n        roleAdapter.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);\r\n\r\n        roleSpin.setAdapter(roleAdapter);\r\n    }\r\n\r\n    public void setupCode(String clientCode, String devCode, boolean gotApplication){\r\n        customerView = findViewById(R.id.inviteCodeCustomer);\r\n        customerView.setText(clientCode);\r\n//        customerView.setText(Project.clientCode);\r\n\r\n        developerView = findViewById(R.id.inviteCodeDeveloper);\r\n        developerView.setText(devCode);\r\n\r\n        if(gotApplication && isManager)\r\n            notification.setVisibility(View.VISIBLE);\r\n        else\r\n            notification.setVisibility(View.INVISIBLE);\r\n\r\n//        developerView.setText(Project.devCode);\r\n\r\n//        getCode();\r\n    }\r\n\r\n    public void setErrText(String message){\r\n        errView.setText(message);\r\n        errView.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    private void setupButton(){\r\n        Button btInvite = findViewById(R.id.buttonInvite);\r\n        btInvite.setOnClickListener(v -> {\r\n            if(validate())\r\n                inviteUser();\r\n        });\r\n\r\n        Button btView = findViewById(R.id.buttonApplication);\r\n        btView.setOnClickListener(v -> {\r\n            if(validate())\r\n                viewApplication();\r\n        });\r\n\r\n        Button btDone = findViewById(R.id.buttonDone);\r\n        btDone.setOnClickListener(v -> {\r\n            validate();\r\n            finish();\r\n        });\r\n\r\n\r\n        if(!isManager){\r\n            btView.setVisibility(View.GONE);\r\n            notification.setVisibility(View.GONE);\r\n        }\r\n    }\r\n\r\n    private void inviteUser(){\r\n        userEdit = findViewById(R.id.textUsername);\r\n        String username = userEdit.getText().toString();\r\n        System.out.println(\"Invite Username: \" + username);\r\n        if(!username.isEmpty()) {\r\n            String projectName = Session.getInstance().getProjectName();\r\n            String projectRole = roleSpin.getSelectedItem().toString();\r\n            manage.inviteUser(username, projectName, projectRole);\r\n        }else{\r\n            setErrText(\"Please enter a username!\");\r\n        }\r\n    }\r\n\r\n\r\n    public void finishInvite(){\r\n        System.out.println(\"Sent Invitation\");\r\n        userEdit.getText().clear();\r\n        Toast.makeText(getApplicationContext(), \"Invitation Sent\", Toast.LENGTH_SHORT).show();\r\n\r\n    }\r\n\r\n    private void viewApplication(){\r\n        startActivity(new Intent(InviteActivity.this, ViewApplicationActivity.class));\r\n    }\r\n\r\n//    private void getCode(){\r\n//        db_ref.addValueEventListener(new ValueEventListener() {\r\n//            @Override\r\n//            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n//                String clientCode = dataSnapshot.child(\"clientCode\").getValue().toString();\r\n//                String devCode = dataSnapshot.child(\"devCode\").getValue().toString();\r\n//\r\n//                customerView.setText(clientCode);\r\n//                developerView.setText(devCode);\r\n//            }\r\n//\r\n//            @Override\r\n//            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n//\r\n//            }\r\n//        });\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/activity/InviteActivity.java	(revision cd9eb28d35497b8cfe72b1308ad98954080e8c09)
+++ app/src/main/java/com/example/myapplication/activity/InviteActivity.java	(date 1606883834643)
@@ -38,7 +38,7 @@
 
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_invite_code_page);
-        setupUI(findViewById(R.id.inviteViewActivity));
+        setupUI(findViewById(R.id.projectInvitePage));
 
         errView = findViewById(R.id.errorMessageTip);
         errView.setVisibility(View.INVISIBLE);
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_27_2020_1_14_PM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_11_27_2020_1_14_PM_[Default_Changelist]/shelved.patch	(revision cd9eb28d35497b8cfe72b1308ad98954080e8c09)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_11_27_2020_1_14_PM_[Default_Changelist]/shelved.patch	(revision cd9eb28d35497b8cfe72b1308ad98954080e8c09)
@@ -1,67 +0,0 @@
-Index: app/src/main/java/com/example/myapplication/activity/SignUpActivity.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.myapplication.activity;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.EditText;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\n\r\nimport com.example.myapplication.R;\r\nimport com.example.myapplication.element.Question;\r\nimport com.example.myapplication.element.User;\r\nimport com.example.myapplication.engine.SignUp;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\n\r\npublic class SignUpActivity extends AppCompatActivity {\r\n\r\n    TextView errView;\r\n    Spinner questionSpin;\r\n\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        if (getSupportActionBar() != null) {\r\n            getSupportActionBar().hide();\r\n        }\r\n\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_sign_up);\r\n\r\n        errView = findViewById(R.id.errorMessage);\r\n        errView.setVisibility(View.INVISIBLE);\r\n\r\n        questionSpin = findViewById(R.id.spinnerSecurityQuestion);\r\n\r\n        ArrayAdapter<String> questionAdapter = new ArrayAdapter<String>(this, R.layout.support_simple_spinner_dropdown_item, Question.QUESTION);\r\n        questionAdapter.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);\r\n        questionSpin.setAdapter(questionAdapter);\r\n\r\n\r\n        FloatingActionButton btSignUp = findViewById(R.id.buttonNextStep);\r\n        btSignUp.setOnClickListener(v -> signup());\r\n    }\r\n\r\n    private String getEditValue(int id){\r\n        EditText tempEdit = findViewById(id);\r\n        return tempEdit.getText().toString();\r\n    }\r\n\r\n    private void signup(){\r\n\r\n        String name = getEditValue(R.id.enterAccountName);\r\n        String pass = getEditValue(R.id.enterPassword);\r\n        String repass = getEditValue(R.id.reEnterPassword);\r\n        String answer = getEditValue(R.id.enterAnswer);\r\n\r\n\r\n        questionSpin = findViewById(R.id.spinnerSecurityQuestion);\r\n        int quesIndex = questionSpin.getSelectedItemPosition();\r\n\r\n        if(!pass.equals(repass)){\r\n            //Error\r\n//            errView.setText(\"Password incorrect\");\r\n//            errView.setVisibility(View.VISIBLE);\r\n            setErrView(\"Password incorrect\");\r\n            return;\r\n        }\r\n\r\n        if(name.isEmpty() || pass.isEmpty() || repass.isEmpty() || answer.isEmpty()){\r\n            setErrView(\"Fields are Empty\");\r\n            return;\r\n        }\r\n\r\n//        if(name.length() == 0 || pass.length() == 0 || repass.length() == 0\r\n//                || answer.length() == 0){\r\n//            errView.setText(\"Fields are empty\");\r\n//            errView.setVisibility(View.VISIBLE);\r\n//            return;\r\n//        }\r\n        //TODO: Password policy Verification?\r\n\r\n        User user  = new User(name, pass, quesIndex, answer);\r\n        new SignUp(this, user);\r\n//        signupApp.signup();\r\n//        signUpToDatabase(name, pass, quesIndex, answer);\r\n    }\r\n\r\n//    private void signUpToDatabase(String name, String pass, int quesIndex, String answer){\r\n//        byte[] password = pass.getBytes();\r\n//        MessageDigest md = null;\r\n//        try {\r\n//            md = MessageDigest.getInstance(\"SHA-256\");\r\n//        } catch (NoSuchAlgorithmException e) {\r\n//            e.printStackTrace();\r\n//        }\r\n//        md.update(password);\r\n//        byte[] digest = md.digest();\r\n//        StringBuffer hex = new StringBuffer();\r\n//        for(int i = 0; i < digest.length; i++){\r\n//            hex.append(Integer.toString((digest[i]&0xff) + 0x100, 16).substring(1));\r\n//        }\r\n//        String pass_in_string = hex.toString();\r\n//        user = new User(name, pass_in_string, quesIndex, answer);\r\n//        final String Name = name;\r\n//        users.addListenerForSingleValueEvent(new ValueEventListener() {\r\n//            @Override\r\n//            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n//                if(dataSnapshot.child(Name).exists()){\r\n//                    errView.setText(\"Username is already in database\");\r\n//                    errView.setVisibility(View.VISIBLE);\r\n//                }\r\n//                else {\r\n//                    users.child(Name).setValue(user);\r\n//                    Toast.makeText(getApplicationContext(), \"Sign up successfully!\", Toast.LENGTH_SHORT).show();\r\n//                }\r\n//                Intent intent = new Intent(SignUpActivity.this, MainActivity.class);\r\n//                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n//                startActivity(intent);\r\n//            }\r\n//            @Override\r\n//            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n//            }\r\n//        });\r\n//    }\r\n\r\n    public void setErrView(String errMsg){\r\n        errView.setText(errMsg);\r\n        errView.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    public void finishSignUp(){\r\n        Toast.makeText(getApplicationContext(), \"SignUp successfully\", Toast.LENGTH_SHORT).show();\r\n        Intent intent = new Intent(SignUpActivity.this, MainActivity.class);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivity(intent);\r\n    }\r\n\r\n    //Getter added for testing purposes by Henry Koenig\r\n    public TextView getErrView() {\r\n        return errView;\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/myapplication/activity/SignUpActivity.java	(revision 98839fb85b6c8de9f73f8623b732920ef3e82629)
-+++ app/src/main/java/com/example/myapplication/activity/SignUpActivity.java	(date 1606504436659)
-@@ -76,57 +76,12 @@
-             return;
-         }
- 
--//        if(name.length() == 0 || pass.length() == 0 || repass.length() == 0
--//                || answer.length() == 0){
--//            errView.setText("Fields are empty");
--//            errView.setVisibility(View.VISIBLE);
--//            return;
--//        }
-         //TODO: Password policy Verification?
- 
-         User user  = new User(name, pass, quesIndex, answer);
-         new SignUp(this, user);
--//        signupApp.signup();
--//        signUpToDatabase(name, pass, quesIndex, answer);
-     }
- 
--//    private void signUpToDatabase(String name, String pass, int quesIndex, String answer){
--//        byte[] password = pass.getBytes();
--//        MessageDigest md = null;
--//        try {
--//            md = MessageDigest.getInstance("SHA-256");
--//        } catch (NoSuchAlgorithmException e) {
--//            e.printStackTrace();
--//        }
--//        md.update(password);
--//        byte[] digest = md.digest();
--//        StringBuffer hex = new StringBuffer();
--//        for(int i = 0; i < digest.length; i++){
--//            hex.append(Integer.toString((digest[i]&0xff) + 0x100, 16).substring(1));
--//        }
--//        String pass_in_string = hex.toString();
--//        user = new User(name, pass_in_string, quesIndex, answer);
--//        final String Name = name;
--//        users.addListenerForSingleValueEvent(new ValueEventListener() {
--//            @Override
--//            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
--//                if(dataSnapshot.child(Name).exists()){
--//                    errView.setText("Username is already in database");
--//                    errView.setVisibility(View.VISIBLE);
--//                }
--//                else {
--//                    users.child(Name).setValue(user);
--//                    Toast.makeText(getApplicationContext(), "Sign up successfully!", Toast.LENGTH_SHORT).show();
--//                }
--//                Intent intent = new Intent(SignUpActivity.this, MainActivity.class);
--//                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
--//                startActivity(intent);
--//            }
--//            @Override
--//            public void onCancelled(@NonNull DatabaseError databaseError) {
--//            }
--//        });
--//    }
- 
-     public void setErrView(String errMsg){
-         errView.setText(errMsg);
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_27_2020_1_14_PM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_11_27_2020_1_14_PM__Default_Changelist_.xml	(revision cd9eb28d35497b8cfe72b1308ad98954080e8c09)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_11_27_2020_1_14_PM__Default_Changelist_.xml	(revision cd9eb28d35497b8cfe72b1308ad98954080e8c09)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_11_27_2020_1_14_PM_[Default_Changelist]" date="1606504482681" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_27_2020_1_14_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11/27/2020 1:14 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: app/src/main/java/com/example/myapplication/engine/SignUp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.engine;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.example.myapplication.activity.SignUpActivity;\r\nimport com.example.myapplication.element.User;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\npublic class SignUp {\r\n\r\n    FirebaseDatabase firebase;\r\n    DatabaseReference db_ref;\r\n    SignUpActivity activity;\r\n    User user;\r\n\r\n    public SignUp(SignUpActivity activity, User user){\r\n        firebase = FirebaseDatabase.getInstance();\r\n        db_ref = firebase.getReference(\"Users\");\r\n        this.activity = activity;\r\n        this.user = user;\r\n        signUp();\r\n    }\r\n\r\n    public void signUp(){\r\n//        user.password = hashPass(user.password);\r\n        if(!validatePassword(user.password)) {\r\n            return;\r\n        }\r\n        user.password = User.hashPassword(user.password);\r\n        if(user.password == null){\r\n            activity.setErrView(\"Encountered unexpected error\");\r\n        }else {\r\n            updateDatabase();\r\n        }\r\n    }\r\n\r\n    private boolean validatePassword(String password){\r\n        //Null check added by Henry to prevent NPEs\r\n        //from being thrown and crashing on null\r\n        //password passed in.\r\n        if(password == null || password.length() < 6 || password.isEmpty()) {\r\n            activity.setErrView(\"Password Length must at least 6 characters\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    private void updateDatabase(){\r\n        db_ref.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if(snapshot.child(user.username).exists()){\r\n                    activity.setErrView(\"Username is already exist in database\");\r\n                }else{\r\n                    db_ref.child(user.username).setValue(user);\r\n                    activity.finishSignUp();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/engine/SignUp.java	(revision cd9eb28d35497b8cfe72b1308ad98954080e8c09)
+++ app/src/main/java/com/example/myapplication/engine/SignUp.java	(date 1606882781117)
@@ -56,7 +56,7 @@
             @Override
             public void onDataChange(@NonNull DataSnapshot snapshot) {
                 if(snapshot.child(user.username).exists()){
-                    activity.setErrView("Username is already exist in database");
+                    activity.setErrView("Username already exists");
                 }else{
                     db_ref.child(user.username).setValue(user);
                     activity.finishSignUp();
Index: app/src/main/java/com/example/myapplication/engine/ManageProjectInvite.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.engine;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.example.myapplication.activity.InviteActivity;\r\nimport com.example.myapplication.element.Invitation;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class ManageProjectInvite {\r\n    FirebaseDatabase firebase;\r\n    DatabaseReference db_ref_project, db_ref_roles, db_ref_users;\r\n    InviteActivity activity;\r\n    List<String> userList;\r\n    List<String> projectMemberList;\r\n    String projectId;\r\n    int inviteId;\r\n\r\n\r\n    public ManageProjectInvite(InviteActivity activity, String projectId){\r\n        firebase = FirebaseDatabase.getInstance();\r\n        db_ref_project = firebase.getReference(\"Project\").child(projectId);\r\n        db_ref_roles = firebase.getReference(\"Roles\").child(projectId);\r\n        db_ref_users = firebase.getReference(\"Users\");\r\n\r\n        retrieveUserData();\r\n        retrieveMemberList();\r\n        this.activity = activity;\r\n        this.projectId = projectId;\r\n    }\r\n\r\n    public void inviteUser(String username, String projectName, String projectRoles){\r\n\r\n        if(username.isEmpty())\r\n            activity.setErrText(\"Please enter a username\");\r\n\r\n        if(isUserExist(username) && !isMember(username)) {\r\n            generateInviteId(username);\r\n            sendInvite(username, projectName, projectRoles);\r\n        }\r\n    }\r\n\r\n    public boolean isUserExist(String username){\r\n        for(String temp : userList){\r\n            if(temp.equals(username)){\r\n                return true;\r\n            }\r\n        }\r\n        activity.setErrText(\"The user entered does not exists\");\r\n        return false;\r\n    }\r\n\r\n    public boolean isMember(String username){\r\n        for(String member : projectMemberList){\r\n            if(member.equals(username)){\r\n                activity.setErrText(\"The user entered is already in project\");\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private void retrieveUserData(){\r\n        db_ref_users.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                userList = new ArrayList<>();\r\n                for(DataSnapshot snap: snapshot.getChildren()){\r\n                    String username = snap.getKey();\r\n                    userList.add(username);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void retrieveMemberList(){\r\n        db_ref_roles.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                projectMemberList = new ArrayList<>();\r\n                for(DataSnapshot snap : snapshot.getChildren()){\r\n                    String member = snap.getKey();\r\n                    boolean isMember = snap.child(\"Roles\").exists();\r\n\r\n                    if(isMember){\r\n                        projectMemberList.add(member);\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void sendInvite(String username, String projectName, String projectRoles){\r\n        final String user = username;\r\n        final String name = projectName;\r\n        final String roles = projectRoles;\r\n        System.out.println(\"Send Invite here\");\r\n        db_ref_users.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                Invitation invite = new Invitation(projectId, name, roles);\r\n//                invite.setInviteId(Integer.toString(inviteId));\r\n                db_ref_users.child(user).child(\"Invitation\").child(Integer.toString(inviteId)).setValue(invite);\r\n                activity.finishInvite();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public void getInviteCode(){\r\n        db_ref_project.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                String clientCode = snapshot.child(\"clientCode\").getValue().toString();\r\n                String devCode = snapshot.child(\"devCode\").getValue().toString();\r\n                boolean gotApplication = snapshot.child(\"Application\").exists();\r\n                System.out.println(\"Got Application : \" + gotApplication);\r\n                activity.setupCode(clientCode, devCode, gotApplication);\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void generateInviteId(String username){\r\n        final String user = username;\r\n        db_ref_users.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                snapshot = snapshot.child(user).child(\"Invitation\");\r\n                for(DataSnapshot snap : snapshot.getChildren()){\r\n                    inviteId = Integer.parseInt(snap.getKey()) + 1;\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/engine/ManageProjectInvite.java	(revision cd9eb28d35497b8cfe72b1308ad98954080e8c09)
+++ app/src/main/java/com/example/myapplication/engine/ManageProjectInvite.java	(date 1606882818904)
@@ -52,7 +52,7 @@
                 return true;
             }
         }
-        activity.setErrText("The user entered does not exists");
+        activity.setErrText("The user entered does not exist");
         return false;
     }
 
Index: app/src/main/java/com/example/myapplication/engine/JoinProject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.engine;\r\n\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.example.myapplication.activity.JoinProjectActivity;\r\nimport com.example.myapplication.element.Project;\r\nimport com.example.myapplication.element.Application;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class JoinProject {\r\n    FirebaseDatabase firebase;\r\n    DatabaseReference db_ref_project, db_ref_roles, db_ref_users;\r\n\r\n    JoinProjectActivity activity;\r\n    boolean isValid, isDeveloper;\r\n    String projectName, inviteCode, username, projectId, roles;\r\n    List<Project> projectList;\r\n    List<Application> appList;\r\n\r\n\r\n    public JoinProject(JoinProjectActivity activity, String username){\r\n        firebase = FirebaseDatabase.getInstance();\r\n        db_ref_project = firebase.getReference(\"Project\");\r\n        db_ref_roles = firebase.getReference(\"Roles\");\r\n        db_ref_users = firebase.getReference(\"Users\");\r\n        this.activity = activity;\r\n        this.username = username;\r\n        retrieveDatabase();\r\n        checkInvitation();\r\n    }\r\n\r\n    public void joinProject(String inviteCode, String username){\r\n        this.inviteCode = inviteCode;\r\n        this.username = username;\r\n\r\n        if(checkInviteCode(inviteCode))\r\n            joinProjectInDatabase();\r\n    }\r\n\r\n    public void applyProject(String projectName, String roles, String username){\r\n        this.projectName = projectName;\r\n        this.roles = roles;\r\n        this.username = username;\r\n\r\n        if(checkProjectName(projectName)){\r\n            appList.add(new Application(username, roles));\r\n            submitApplication();\r\n        }\r\n    }\r\n\r\n    public void setProjectValue(Project project){\r\n        this.projectName = project.projectName;\r\n        this.projectId = Long.toString(project.projectId);\r\n    }\r\n\r\n    private void retrieveDatabase(){\r\n        db_ref_project.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                projectList = new ArrayList<>();\r\n                appList = new ArrayList<>();\r\n                for(DataSnapshot snap : snapshot.getChildren()){\r\n                        String name = snap.child(\"projectName\").getValue().toString();\r\n                        long projectId = Long.parseLong(snap.getKey());\r\n                        String clientCode = snap.child(\"clientCode\").getValue().toString();\r\n                        String devCode = snap.child(\"devCode\").getValue().toString();\r\n\r\n                        for(DataSnapshot appSnap : snap.child(\"Application\").getChildren()){\r\n                            String username = appSnap.child(\"username\").getValue().toString();\r\n                            String roles = appSnap.child(\"roles\").getValue().toString();\r\n                            appList.add(new Application(username, roles));\r\n                        }\r\n\r\n                        Project project = new Project(projectId, name, clientCode, devCode);\r\n                        projectList.add(project);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void checkInvitation(){\r\n        db_ref_users.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                boolean gotInvitation = snapshot.child(username).child(\"Invitation\").exists();\r\n                activity.setNotification(gotInvitation);\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private boolean checkInviteCode(String inviteCode){\r\n        boolean isExist = false;\r\n\r\n        for(Project project : projectList){\r\n            if(project.clientCode.equals(inviteCode)){\r\n                activity.setProjectValue(project);\r\n                setProjectValue(project);\r\n                isValid = true;\r\n                isDeveloper = false;\r\n                break;\r\n            }else if(project.devCode.equals(inviteCode)){\r\n                activity.setProjectValue(project);\r\n                setProjectValue(project);\r\n                isValid = true;\r\n                isDeveloper = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(!isExist){\r\n            activity.setErrText(\"The invitation code is invalid\");\r\n        }\r\n\r\n        return isExist;\r\n    }\r\n\r\n    private boolean checkProjectName(String projectName){\r\n        for(Project project : projectList){\r\n            if(project.projectName.equals(projectName)){\r\n                setProjectValue(project);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        activity.setErrText(\"The project does not exists\");\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    public void joinProjectInDatabase(){\r\n\r\n        db_ref_roles.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                boolean isExist;\r\n                if(isValid){\r\n                    isExist = snapshot.child(projectId).child(username).exists();\r\n                    if(!isExist){\r\n                        String userRole = \"client\";\r\n                        if(isDeveloper){\r\n                            userRole = \"developer\";\r\n                        }\r\n\r\n                        db_ref_roles.child(projectId).child(\"ProjectName\").setValue(projectName);\r\n                        db_ref_roles.child(projectId).child(username).child(\"Roles\").setValue(userRole);\r\n\r\n                        activity.finishJoin(isDeveloper);\r\n                    }else{\r\n                        activity.setErrText(\"The user already join the project\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void submitApplication(){\r\n        db_ref_project.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n//                Application app = new Application(username, roles);\r\n                db_ref_project.child(projectId).child(\"Application\").setValue(appList);\r\n                System.out.println(projectName);\r\n                activity.finishApply();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/engine/JoinProject.java	(revision cd9eb28d35497b8cfe72b1308ad98954080e8c09)
+++ app/src/main/java/com/example/myapplication/engine/JoinProject.java	(date 1606882818830)
@@ -140,7 +140,7 @@
             }
         }
 
-        activity.setErrText("The project does not exists");
+        activity.setErrText("The project does not exist");
 
         return false;
     }
